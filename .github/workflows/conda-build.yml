name: Conda Build

on:
  workflow_dispatch:
    inputs:
      buildNumber:
        type: string
        required: true
        description: "build-nr: anaconda.org build-nr (DON'T trigger build if you don't know how to set it)"
      version:
        type: string
        required: true
        description: "version: PEP440 package-version (DON'T trigger build if you don't know what PEP440 is)"
      python-version:
        type: string
        required: true
        description: "Python version to test"
      buildDocker:
        type: boolean
        required: false
        default: false
        description: "build docker-img if conda-build & tests succeeded?"
      latestDocker:
        type: boolean
        required: false
        default: false
        description: "tag docker-img as latest (if `buildDocker` is enabled)"
  workflow_call:
    inputs:
      buildNumber:
        type: string
        required: true
      version:
        type: string
        required: true
      python-version:
        type: string
        required: true
        description: "Python version to test"
      buildDocker:
        type: boolean
        required: false
        default: false
      latestDocker:
        type: boolean
        required: false
        default: false


jobs:
  conda-build:
    runs-on: ubuntu-latest
    outputs:
      karabo-version: ${{ steps.bcs.outputs.karabo_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
      - name: Build Conda
        id: bcs
        shell: bash -l {0}
        run: |
          build=${{ inputs.buildNumber }}
          LATEST_DOCKER=${{ inputs.latestDocker }}
          KARABO_VERSION=${{ inputs.version }}
          if [[ ${KARABO_VERSION:0:1} == "v" ]]; then
            KARABO_VERSION="${KARABO_VERSION:1}"
          fi
          conda install -c conda-forge python versioneer
          VERSIONEER_VERSION=$(python -c 'import versioneer; print(versioneer.get_version())')
          if [[ "$VERSIONEER_VERSION" != *"$KARABO_VERSION"* ]] && [[ "$KARABO_VERSION" != *"dev"* ]]; then
            echo "Provided version $KARABO_VERSION doesn't match the actual version $VERSIONEER_VERSION"
            exit 1
          fi
          if [[ "$KARABO_VERSION" == *"dev"* ]]; then
            if [[ $LATEST_DOCKER == 'true' ]]; then
              echo "Dev build docker image can not be tagged as latest!"
              exit 1
            fi
            build="$(($build + 1000))"
          fi

          conda install -y -n base conda-libmamba-solver anaconda-client
          conda config --set solver libmamba
          conda install "conda-build>=25"

          conda config --remove channels defaults
          conda config --append channels i4ds
          conda config --append channels nvidia/label/cuda-11.7.0
          conda config --append channels conda-forge

          export KARABO_VERSION=$KARABO_VERSION build=$build
          conda build conda

          echo "karabo_version=$KARABO_VERSION" >> $GITHUB_OUTPUT
      - name: Publish to Conda
        shell: bash -l {0}
        run: |
          conda activate base
          anaconda -t ${{ secrets.ANACONDA_SECRET }} upload /opt/conda/conda-bld/linux-64/karabo-pipeline-*.conda --force

  test-conda-wheel:
    needs: conda-build
    uses: ./.github/workflows/test-conda-wheel.yml
    with:
      version: ${{ needs.conda-build.outputs.karabo-version }}
      buildDocker: ${{ inputs.buildDocker }}
      latestDocker: ${{ inputs.latestDocker }}
      python-version: ${{ inputs.python-version }}
